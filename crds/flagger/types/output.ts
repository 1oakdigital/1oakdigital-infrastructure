// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

import * as utilities from "../utilities";

import {ObjectMeta} from "../meta/v1";

export namespace flagger {
    export namespace v1beta1 {
        /**
         * CanarySpec defines the desired state of a Canary.
         */
        export interface CanarySpec {
            /**
             * Canary analysis for this canary
             */
            analysis: any;
            /**
             * Scaler selector
             */
            autoscalerRef?: outputs.flagger.v1beta1.CanarySpecAutoscalerref;
            /**
             * Ingress selector
             */
            ingressRef?: outputs.flagger.v1beta1.CanarySpecIngressref;
            /**
             * Prometheus URL
             */
            metricsServer?: string;
            /**
             * Deployment progress deadline
             */
            progressDeadlineSeconds?: number;
            /**
             * Traffic managent provider
             */
            provider?: string;
            /**
             * Revert mutated resources to original spec on deletion
             */
            revertOnDeletion?: boolean;
            /**
             * Kubernetes Service spec
             */
            service: outputs.flagger.v1beta1.CanarySpecService;
            /**
             * Skip analysis and promote canary
             */
            skipAnalysis?: boolean;
            /**
             * Target selector
             */
            targetRef: outputs.flagger.v1beta1.CanarySpecTargetref;
            /**
             * Gloo Upstream selector
             */
            upstreamRef?: outputs.flagger.v1beta1.CanarySpecUpstreamref;
        }

        /**
         * Scaler selector
         */
        export interface CanarySpecAutoscalerref {
            apiVersion: string;
            kind: string;
            name: string;
            primaryScalerQueries?: {[key: string]: string};
        }

        /**
         * Ingress selector
         */
        export interface CanarySpecIngressref {
            apiVersion: string;
            kind: string;
            name: string;
        }

        /**
         * Kubernetes Service spec
         */
        export interface CanarySpecService {
            /**
             * Metadata to add to the apex service
             */
            apex?: outputs.flagger.v1beta1.CanarySpecServiceApex;
            /**
             * Application protocol of the port
             */
            appProtocol?: string;
            /**
             * AppMesh backend array
             */
            backends?: string[];
            /**
             * Metadata to add to the canary service
             */
            canary?: outputs.flagger.v1beta1.CanarySpecServiceCanary;
            /**
             * Istio Cross-Origin Resource Sharing policy (CORS)
             */
            corsPolicy?: outputs.flagger.v1beta1.CanarySpecServiceCorspolicy;
            /**
             * enable behaving as a delegate VirtualService
             */
            delegation?: boolean;
            /**
             * The list of parent Gateways for a HTTPRoute
             */
            gatewayRefs?: outputs.flagger.v1beta1.CanarySpecServiceGatewayrefs[];
            /**
             * The list of Istio gateway for this virtual service
             */
            gateways?: string[];
            /**
             * Headers operations
             */
            headers?: outputs.flagger.v1beta1.CanarySpecServiceHeaders;
            /**
             * The list of host names for this service
             */
            hosts?: string[];
            /**
             * URI match conditions
             */
            match?: outputs.flagger.v1beta1.CanarySpecServiceMatch[];
            /**
             * AppMesh mesh name
             */
            meshName?: string;
            /**
             * Kubernetes service name
             */
            name?: string;
            /**
             * Container port number
             */
            port: number;
            /**
             * Enable port dicovery
             */
            portDiscovery?: boolean;
            /**
             * Container port name
             */
            portName?: string;
            /**
             * Metadata to add to the primary service
             */
            primary?: outputs.flagger.v1beta1.CanarySpecServicePrimary;
            /**
             * Retry policy for HTTP requests
             */
            retries?: outputs.flagger.v1beta1.CanarySpecServiceRetries;
            /**
             * Rewrite HTTP URIs
             */
            rewrite?: outputs.flagger.v1beta1.CanarySpecServiceRewrite;
            /**
             * Container target port name
             */
            targetPort?: number | string;
            /**
             * HTTP or gRPC request timeout
             */
            timeout?: string;
            /**
             * Istio traffic policy
             */
            trafficPolicy?: outputs.flagger.v1beta1.CanarySpecServiceTrafficpolicy;
        }

        /**
         * Metadata to add to the apex service
         */
        export interface CanarySpecServiceApex {
            annotations?: {[key: string]: string};
            labels?: {[key: string]: string};
        }

        /**
         * Metadata to add to the canary service
         */
        export interface CanarySpecServiceCanary {
            annotations?: {[key: string]: string};
            labels?: {[key: string]: string};
        }

        /**
         * Istio Cross-Origin Resource Sharing policy (CORS)
         */
        export interface CanarySpecServiceCorspolicy {
            allowCredentials?: boolean;
            allowHeaders?: string[];
            /**
             * List of HTTP methods allowed to access the resource
             */
            allowMethods?: string[];
            /**
             * The list of origins that are allowed to perform CORS requests.
             */
            allowOrigin?: string[];
            /**
             * String patterns that match allowed origins
             */
            allowOrigins?: any[];
            exposeHeaders?: string[];
            maxAge?: string;
        }

        export interface CanarySpecServiceGatewayrefs {
            group?: string;
            kind?: string;
            name: string;
            namespace?: string;
            sectionName?: string;
        }
        /**
         * canarySpecServiceGatewayrefsProvideDefaults sets the appropriate defaults for CanarySpecServiceGatewayrefs
         */
        export function canarySpecServiceGatewayrefsProvideDefaults(val: CanarySpecServiceGatewayrefs): CanarySpecServiceGatewayrefs {
            return {
                ...val,
                group: (val.group) ?? "gateway.networking.k8s.io",
                kind: (val.kind) ?? "Gateway",
            };
        }

        /**
         * Headers operations
         */
        export interface CanarySpecServiceHeaders {
            request?: outputs.flagger.v1beta1.CanarySpecServiceHeadersRequest;
            response?: outputs.flagger.v1beta1.CanarySpecServiceHeadersResponse;
        }

        export interface CanarySpecServiceHeadersRequest {
            add?: {[key: string]: string};
            remove?: string[];
            set?: {[key: string]: string};
        }

        export interface CanarySpecServiceHeadersResponse {
            add?: {[key: string]: string};
            remove?: string[];
            set?: {[key: string]: string};
        }

        export interface CanarySpecServiceMatch {
            authority?: any;
            /**
             * Names of gateways where the rule should be applied.
             */
            gateways?: string[];
            headers?: {[key: string]: any};
            /**
             * Flag to specify whether the URI matching should be case-insensitive.
             */
            ignoreUriCase?: boolean;
            method?: any;
            /**
             * The name assigned to a match.
             */
            name?: string;
            /**
             * Specifies the ports on the host that is being addressed.
             */
            port?: number;
            /**
             * Query parameters for matching.
             */
            queryParams?: {[key: string]: any};
            scheme?: any;
            sourceLabels?: {[key: string]: string};
            /**
             * Source namespace constraining the applicability of a rule to workloads in that namespace.
             */
            sourceNamespace?: string;
            uri?: any;
            /**
             * withoutHeader has the same syntax with the header, but has opposite meaning.
             */
            withoutHeaders?: {[key: string]: any};
        }

        /**
         * Metadata to add to the primary service
         */
        export interface CanarySpecServicePrimary {
            annotations?: {[key: string]: string};
            labels?: {[key: string]: string};
        }

        /**
         * Retry policy for HTTP requests
         */
        export interface CanarySpecServiceRetries {
            /**
             * Number of retries for a given request
             */
            attempts?: number;
            /**
             * Timeout per retry attempt for a given request
             */
            perTryTimeout?: string;
            /**
             * Specifies the conditions under which retry takes place
             */
            retryOn?: string;
        }

        /**
         * Rewrite HTTP URIs
         */
        export interface CanarySpecServiceRewrite {
            uri?: string;
        }

        /**
         * Istio traffic policy
         */
        export interface CanarySpecServiceTrafficpolicy {
            connectionPool?: outputs.flagger.v1beta1.CanarySpecServiceTrafficpolicyConnectionpool;
            /**
             * Settings controlling the load balancer algorithms.
             */
            loadBalancer?: any;
            /**
             * Settings controlling eviction of unhealthy hosts from the load balancing pool.
             */
            outlierDetection?: outputs.flagger.v1beta1.CanarySpecServiceTrafficpolicyOutlierdetection;
            /**
             * Istio TLS related settings for connections to the upstream service
             */
            tls?: outputs.flagger.v1beta1.CanarySpecServiceTrafficpolicyTls;
        }

        export interface CanarySpecServiceTrafficpolicyConnectionpool {
            /**
             * HTTP connection pool settings.
             */
            http?: outputs.flagger.v1beta1.CanarySpecServiceTrafficpolicyConnectionpoolHttp;
        }

        /**
         * HTTP connection pool settings.
         */
        export interface CanarySpecServiceTrafficpolicyConnectionpoolHttp {
            /**
             * Specify if http1.1 connection should be upgraded to http2 for the associated destination.
             */
            h2UpgradePolicy?: string;
            /**
             * Maximum number of pending HTTP requests to a destination.
             */
            http1MaxPendingRequests?: number;
            /**
             * Maximum number of requests to a backend.
             */
            http2MaxRequests?: number;
            /**
             * The idle timeout for upstream connection pool connections.
             */
            idleTimeout?: string;
            /**
             * Maximum number of requests per connection to a backend.
             */
            maxRequestsPerConnection?: number;
            maxRetries?: number;
        }

        /**
         * Settings controlling eviction of unhealthy hosts from the load balancing pool.
         */
        export interface CanarySpecServiceTrafficpolicyOutlierdetection {
            /**
             * Minimum ejection duration.
             */
            baseEjectionTime?: string;
            /**
             * Number of 5xx errors before a host is ejected from the connection pool.
             */
            consecutive5xxErrors?: number;
            consecutiveErrors?: number;
            /**
             * Number of gateway errors before a host is ejected from the connection pool.
             */
            consecutiveGatewayErrors?: number;
            /**
             * Time interval between ejection sweep analysis.
             */
            interval?: string;
            maxEjectionPercent?: number;
            minHealthPercent?: number;
        }

        /**
         * Istio TLS related settings for connections to the upstream service
         */
        export interface CanarySpecServiceTrafficpolicyTls {
            caCertificates?: string;
            /**
             * REQUIRED if mode is `MUTUAL`.
             */
            clientCertificate?: string;
            mode?: string;
            /**
             * REQUIRED if mode is `MUTUAL`.
             */
            privateKey?: string;
            /**
             * SNI string to present to the server during TLS handshake.
             */
            sni?: string;
            subjectAltNames?: string[];
        }

        /**
         * Target selector
         */
        export interface CanarySpecTargetref {
            apiVersion: string;
            kind: string;
            name: string;
        }

        /**
         * Gloo Upstream selector
         */
        export interface CanarySpecUpstreamref {
            apiVersion: string;
            kind: string;
            name: string;
            namespace?: string;
        }

        /**
         * CanaryStatus defines the observed state of a canary.
         */
        export interface CanaryStatus {
            /**
             * Traffic weight routed to canary
             */
            canaryWeight?: number;
            /**
             * Status conditions of this canary
             */
            conditions?: outputs.flagger.v1beta1.CanaryStatusConditions[];
            /**
             * Failed check count of the current canary analysis
             */
            failedChecks?: number;
            /**
             * Iteration count of the current canary analysis
             */
            iterations?: number;
            /**
             * LastAppliedSpec of this canary
             */
            lastAppliedSpec?: string;
            /**
             * LastPromotedSpec of this canary
             */
            lastPromotedSpec?: string;
            /**
             * LastTransitionTime of this canary
             */
            lastTransitionTime?: string;
            /**
             * Analysis phase of this canary
             */
            phase?: string;
            /**
             * Session affinity cookie of the previous canary run
             */
            previousSessionAffinityCookie?: string;
            /**
             * Session affinity cookie of the current canary run
             */
            sessionAffinityCookie?: string;
            /**
             * TrackedConfig of this canary
             */
            trackedConfigs?: {[key: string]: string};
        }

        export interface CanaryStatusConditions {
            /**
             * LastTransitionTime of this condition
             */
            lastTransitionTime?: string;
            /**
             * LastUpdateTime of this condition
             */
            lastUpdateTime?: string;
            /**
             * Message associated with this condition
             */
            message?: string;
            /**
             * Reason for the current status of this condition
             */
            reason: string;
            /**
             * Status of this condition
             */
            status: string;
            /**
             * Type of this condition
             */
            type: string;
        }

        /**
         * MetricTemplateSpec defines the desired state of a MetricTemplate.
         */
        export interface MetricTemplateSpec {
            /**
             * Provider of this metric template
             */
            provider: outputs.flagger.v1beta1.MetricTemplateSpecProvider;
            /**
             * Query of this metric template
             */
            query: string;
        }

        /**
         * Provider of this metric template
         */
        export interface MetricTemplateSpecProvider {
            /**
             * API address of this provider
             */
            address?: string;
            /**
             * Disable SSL certificate validation for the provider address
             */
            insecureSkipVerify?: boolean;
            /**
             * Region of the provider
             */
            region?: string;
            /**
             * Kubernetes secret reference containing the provider credentials
             */
            secretRef?: outputs.flagger.v1beta1.MetricTemplateSpecProviderSecretref;
            /**
             * Type of this provider
             */
            type: string;
        }

        /**
         * Kubernetes secret reference containing the provider credentials
         */
        export interface MetricTemplateSpecProviderSecretref {
            /**
             * Name of the Kubernetes secret
             */
            name: string;
        }

    }
}
