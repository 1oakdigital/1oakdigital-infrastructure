// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

import * as utilities from "../utilities";

import {ObjectMeta} from "../meta/v1";

export namespace monitoring {
    export namespace v1alpha1 {
        /**
         * Spec holds the specification of the desired behavior for the Metrics instance.
         */
        export interface MetricsInstanceSpecArgs {
            /**
             * AdditionalScrapeConfigs allows specifying a key of a Secret containing additional Grafana Agent Prometheus scrape configurations. SCrape configurations specified are appended to the configurations generated by the Grafana Agent Operator. Job configurations specified must have the form as specified in the official Prometheus documentation: https://prometheus.io/docs/prometheus/latest/configuration/configuration/#scrape_config. As scrape configs are appended, the user is responsible to make sure it is valid. Note that using this feature may expose the possibility to break upgrades of Grafana Agent. It is advised to review both Grafana Agent and Prometheus release notes to ensure that no incompatible scrape configs are going to break Grafana Agent after the upgrade.
             */
            additionalScrapeConfigs?: pulumi.Input<inputs.monitoring.v1alpha1.MetricsInstanceSpecAdditionalscrapeconfigsArgs>;
            /**
             * MaxWALTime is the maximum amount of time series and asmples may exist in the WAL before being forcibly deleted.
             */
            maxWALTime?: pulumi.Input<string>;
            /**
             * MinWALTime is the minimum amount of time series and samples may exist in the WAL before being considered for deletion.
             */
            minWALTime?: pulumi.Input<string>;
            /**
             * PodMonitorNamespaceSelector are the set of labels to determine which namespaces to watch for PodMonitor discovery. If nil, only checks own namespace.
             */
            podMonitorNamespaceSelector?: pulumi.Input<inputs.monitoring.v1alpha1.MetricsInstanceSpecPodmonitornamespaceselectorArgs>;
            /**
             * PodMonitorSelector determines which PodMonitors should be selected for target discovery. Experimental.
             */
            podMonitorSelector?: pulumi.Input<inputs.monitoring.v1alpha1.MetricsInstanceSpecPodmonitorselectorArgs>;
            /**
             * ProbeNamespaceSelector are the set of labels to determine which namespaces to watch for Probe discovery. If nil, only checks own namespace.
             */
            probeNamespaceSelector?: pulumi.Input<inputs.monitoring.v1alpha1.MetricsInstanceSpecProbenamespaceselectorArgs>;
            /**
             * ProbeSelector determines which Probes should be selected for target discovery.
             */
            probeSelector?: pulumi.Input<inputs.monitoring.v1alpha1.MetricsInstanceSpecProbeselectorArgs>;
            /**
             * RemoteFlushDeadline is the deadline for flushing data when an instance shuts down.
             */
            remoteFlushDeadline?: pulumi.Input<string>;
            /**
             * RemoteWrite controls remote_write settings for this instance.
             */
            remoteWrite?: pulumi.Input<pulumi.Input<inputs.monitoring.v1alpha1.MetricsInstanceSpecRemotewriteArgs>[]>;
            /**
             * ServiceMonitorNamespaceSelector are the set of labels to determine which namespaces to watch for ServiceMonitor discovery. If nil, only checks own namespace.
             */
            serviceMonitorNamespaceSelector?: pulumi.Input<inputs.monitoring.v1alpha1.MetricsInstanceSpecServicemonitornamespaceselectorArgs>;
            /**
             * ServiceMonitorSelector determines which ServiceMonitors should be selected for target discovery.
             */
            serviceMonitorSelector?: pulumi.Input<inputs.monitoring.v1alpha1.MetricsInstanceSpecServicemonitorselectorArgs>;
            /**
             * WALTruncateFrequency specifies how frequently the WAL truncation process should run. Higher values causes the WAL to increase and for old series to stay in the WAL for longer, but reduces the chances of data loss when remote_write is failing for longer than the given frequency.
             */
            walTruncateFrequency?: pulumi.Input<string>;
            /**
             * WriteStaleOnShutdown writes staleness markers on shutdown for all series.
             */
            writeStaleOnShutdown?: pulumi.Input<boolean>;
        }

        /**
         * AdditionalScrapeConfigs allows specifying a key of a Secret containing additional Grafana Agent Prometheus scrape configurations. SCrape configurations specified are appended to the configurations generated by the Grafana Agent Operator. Job configurations specified must have the form as specified in the official Prometheus documentation: https://prometheus.io/docs/prometheus/latest/configuration/configuration/#scrape_config. As scrape configs are appended, the user is responsible to make sure it is valid. Note that using this feature may expose the possibility to break upgrades of Grafana Agent. It is advised to review both Grafana Agent and Prometheus release notes to ensure that no incompatible scrape configs are going to break Grafana Agent after the upgrade.
         */
        export interface MetricsInstanceSpecAdditionalscrapeconfigsArgs {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * PodMonitorNamespaceSelector are the set of labels to determine which namespaces to watch for PodMonitor discovery. If nil, only checks own namespace.
         */
        export interface MetricsInstanceSpecPodmonitornamespaceselectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.monitoring.v1alpha1.MetricsInstanceSpecPodmonitornamespaceselectorMatchexpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface MetricsInstanceSpecPodmonitornamespaceselectorMatchexpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * PodMonitorSelector determines which PodMonitors should be selected for target discovery. Experimental.
         */
        export interface MetricsInstanceSpecPodmonitorselectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.monitoring.v1alpha1.MetricsInstanceSpecPodmonitorselectorMatchexpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface MetricsInstanceSpecPodmonitorselectorMatchexpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * ProbeNamespaceSelector are the set of labels to determine which namespaces to watch for Probe discovery. If nil, only checks own namespace.
         */
        export interface MetricsInstanceSpecProbenamespaceselectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.monitoring.v1alpha1.MetricsInstanceSpecProbenamespaceselectorMatchexpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface MetricsInstanceSpecProbenamespaceselectorMatchexpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * ProbeSelector determines which Probes should be selected for target discovery.
         */
        export interface MetricsInstanceSpecProbeselectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.monitoring.v1alpha1.MetricsInstanceSpecProbeselectorMatchexpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface MetricsInstanceSpecProbeselectorMatchexpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * RemoteWriteSpec defines the remote_write configuration for Prometheus.
         */
        export interface MetricsInstanceSpecRemotewriteArgs {
            /**
             * BasicAuth for the URL.
             */
            basicAuth?: pulumi.Input<inputs.monitoring.v1alpha1.MetricsInstanceSpecRemotewriteBasicauthArgs>;
            /**
             * BearerToken used for remote_write.
             */
            bearerToken?: pulumi.Input<string>;
            /**
             * BearerTokenFile used to read bearer token.
             */
            bearerTokenFile?: pulumi.Input<string>;
            /**
             * Headers is a set of custom HTTP headers to be sent along with each remote_write request. Be aware that any headers set by Grafana Agent itself can't be overwritten.
             */
            headers?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * MetadataConfig configures the sending of series metadata to remote storage.
             */
            metadataConfig?: pulumi.Input<inputs.monitoring.v1alpha1.MetricsInstanceSpecRemotewriteMetadataconfigArgs>;
            /**
             * Name of the remote_write queue. Must be unique if specified. The name is used in metrics and logging in order to differentiate queues.
             */
            name?: pulumi.Input<string>;
            /**
             * Oauth2 for URL
             */
            oauth2?: pulumi.Input<inputs.monitoring.v1alpha1.MetricsInstanceSpecRemotewriteOauth2Args>;
            /**
             * ProxyURL to proxy requests through. Optional.
             */
            proxyUrl?: pulumi.Input<string>;
            /**
             * QueueConfig allows tuning of the remote_write queue parameters.
             */
            queueConfig?: pulumi.Input<inputs.monitoring.v1alpha1.MetricsInstanceSpecRemotewriteQueueconfigArgs>;
            /**
             * RemoteTimeout is the timeout for requests to the remote_write endpoint.
             */
            remoteTimeout?: pulumi.Input<string>;
            /**
             * SigV4 configures SigV4-based authentication to the remote_write endpoint. Will be used if SigV4 is defined, even with an empty object.
             */
            sigv4?: pulumi.Input<inputs.monitoring.v1alpha1.MetricsInstanceSpecRemotewriteSigv4Args>;
            /**
             * TLSConfig to use for remote_write.
             */
            tlsConfig?: pulumi.Input<inputs.monitoring.v1alpha1.MetricsInstanceSpecRemotewriteTlsconfigArgs>;
            /**
             * URL of the endpoint to send samples to.
             */
            url: pulumi.Input<string>;
            /**
             * WriteRelabelConfigs holds relabel_configs to relabel samples before they are sent to the remote_write endpoint.
             */
            writeRelabelConfigs?: pulumi.Input<pulumi.Input<inputs.monitoring.v1alpha1.MetricsInstanceSpecRemotewriteWriterelabelconfigsArgs>[]>;
        }

        /**
         * BasicAuth for the URL.
         */
        export interface MetricsInstanceSpecRemotewriteBasicauthArgs {
            /**
             * The secret in the service monitor namespace that contains the password for authentication.
             */
            password?: pulumi.Input<inputs.monitoring.v1alpha1.MetricsInstanceSpecRemotewriteBasicauthPasswordArgs>;
            /**
             * The secret in the service monitor namespace that contains the username for authentication.
             */
            username?: pulumi.Input<inputs.monitoring.v1alpha1.MetricsInstanceSpecRemotewriteBasicauthUsernameArgs>;
        }

        /**
         * The secret in the service monitor namespace that contains the password for authentication.
         */
        export interface MetricsInstanceSpecRemotewriteBasicauthPasswordArgs {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * The secret in the service monitor namespace that contains the username for authentication.
         */
        export interface MetricsInstanceSpecRemotewriteBasicauthUsernameArgs {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * MetadataConfig configures the sending of series metadata to remote storage.
         */
        export interface MetricsInstanceSpecRemotewriteMetadataconfigArgs {
            /**
             * Send enables metric metadata to be sent to remote storage.
             */
            send?: pulumi.Input<boolean>;
            /**
             * SendInterval controls how frequently metric metadata is sent to remote storage.
             */
            sendInterval?: pulumi.Input<string>;
        }

        /**
         * Oauth2 for URL
         */
        export interface MetricsInstanceSpecRemotewriteOauth2Args {
            /**
             * The secret or configmap containing the OAuth2 client id
             */
            clientId: pulumi.Input<inputs.monitoring.v1alpha1.MetricsInstanceSpecRemotewriteOauth2ClientidArgs>;
            /**
             * The secret containing the OAuth2 client secret
             */
            clientSecret: pulumi.Input<inputs.monitoring.v1alpha1.MetricsInstanceSpecRemotewriteOauth2ClientsecretArgs>;
            /**
             * Parameters to append to the token URL
             */
            endpointParams?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * OAuth2 scopes used for the token request
             */
            scopes?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * The URL to fetch the token from
             */
            tokenUrl: pulumi.Input<string>;
        }

        /**
         * The secret or configmap containing the OAuth2 client id
         */
        export interface MetricsInstanceSpecRemotewriteOauth2ClientidArgs {
            /**
             * ConfigMap containing data to use for the targets.
             */
            configMap?: pulumi.Input<inputs.monitoring.v1alpha1.MetricsInstanceSpecRemotewriteOauth2ClientidConfigmapArgs>;
            /**
             * Secret containing data to use for the targets.
             */
            secret?: pulumi.Input<inputs.monitoring.v1alpha1.MetricsInstanceSpecRemotewriteOauth2ClientidSecretArgs>;
        }

        /**
         * ConfigMap containing data to use for the targets.
         */
        export interface MetricsInstanceSpecRemotewriteOauth2ClientidConfigmapArgs {
            /**
             * The key to select.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Secret containing data to use for the targets.
         */
        export interface MetricsInstanceSpecRemotewriteOauth2ClientidSecretArgs {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * The secret containing the OAuth2 client secret
         */
        export interface MetricsInstanceSpecRemotewriteOauth2ClientsecretArgs {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * QueueConfig allows tuning of the remote_write queue parameters.
         */
        export interface MetricsInstanceSpecRemotewriteQueueconfigArgs {
            /**
             * BatchSendDeadline is the maximum time a sample will wait in buffer.
             */
            batchSendDeadline?: pulumi.Input<string>;
            /**
             * Capacity is the number of samples to buffer per shard before we start dropping them.
             */
            capacity?: pulumi.Input<number>;
            /**
             * MaxBackoff is the maximum retry delay.
             */
            maxBackoff?: pulumi.Input<string>;
            /**
             * MaxRetries is the maximum number of times to retry a batch on recoverable errors.
             */
            maxRetries?: pulumi.Input<number>;
            /**
             * MaxSamplesPerSend is the maximum number of samples per send.
             */
            maxSamplesPerSend?: pulumi.Input<number>;
            /**
             * MaxShards is the maximum number of shards, i.e. amount of concurrency.
             */
            maxShards?: pulumi.Input<number>;
            /**
             * MinBackoff is the initial retry delay. Gets doubled for every retry.
             */
            minBackoff?: pulumi.Input<string>;
            /**
             * MinShards is the minimum number of shards, i.e. amount of concurrency.
             */
            minShards?: pulumi.Input<number>;
            /**
             * RetryOnRateLimit retries requests when encountering rate limits.
             */
            retryOnRateLimit?: pulumi.Input<boolean>;
        }

        /**
         * SigV4 configures SigV4-based authentication to the remote_write endpoint. Will be used if SigV4 is defined, even with an empty object.
         */
        export interface MetricsInstanceSpecRemotewriteSigv4Args {
            /**
             * AccessKey holds the secret of the AWS API access key to use for signing. If not provided, The environment variable AWS_ACCESS_KEY_ID is used.
             */
            accessKey?: pulumi.Input<inputs.monitoring.v1alpha1.MetricsInstanceSpecRemotewriteSigv4AccesskeyArgs>;
            /**
             * Profile is the named AWS profile to use for authentication.
             */
            profile?: pulumi.Input<string>;
            /**
             * Region of the AWS endpoint. If blank, the region from the default credentials chain is used.
             */
            region?: pulumi.Input<string>;
            /**
             * RoleARN is the AWS Role ARN to use for authentication, as an alternative for using the AWS API keys.
             */
            roleARN?: pulumi.Input<string>;
            /**
             * SecretKey of the AWS API to use for signing. If blank, the environment variable AWS_SECRET_ACCESS_KEY is used.
             */
            secretKey?: pulumi.Input<inputs.monitoring.v1alpha1.MetricsInstanceSpecRemotewriteSigv4SecretkeyArgs>;
        }

        /**
         * AccessKey holds the secret of the AWS API access key to use for signing. If not provided, The environment variable AWS_ACCESS_KEY_ID is used.
         */
        export interface MetricsInstanceSpecRemotewriteSigv4AccesskeyArgs {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * SecretKey of the AWS API to use for signing. If blank, the environment variable AWS_SECRET_ACCESS_KEY is used.
         */
        export interface MetricsInstanceSpecRemotewriteSigv4SecretkeyArgs {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * TLSConfig to use for remote_write.
         */
        export interface MetricsInstanceSpecRemotewriteTlsconfigArgs {
            /**
             * Struct containing the CA cert to use for the targets.
             */
            ca?: pulumi.Input<inputs.monitoring.v1alpha1.MetricsInstanceSpecRemotewriteTlsconfigCaArgs>;
            /**
             * Path to the CA cert in the Prometheus container to use for the targets.
             */
            caFile?: pulumi.Input<string>;
            /**
             * Struct containing the client cert file for the targets.
             */
            cert?: pulumi.Input<inputs.monitoring.v1alpha1.MetricsInstanceSpecRemotewriteTlsconfigCertArgs>;
            /**
             * Path to the client cert file in the Prometheus container for the targets.
             */
            certFile?: pulumi.Input<string>;
            /**
             * Disable target certificate validation.
             */
            insecureSkipVerify?: pulumi.Input<boolean>;
            /**
             * Path to the client key file in the Prometheus container for the targets.
             */
            keyFile?: pulumi.Input<string>;
            /**
             * Secret containing the client key file for the targets.
             */
            keySecret?: pulumi.Input<inputs.monitoring.v1alpha1.MetricsInstanceSpecRemotewriteTlsconfigKeysecretArgs>;
            /**
             * Used to verify the hostname for the targets.
             */
            serverName?: pulumi.Input<string>;
        }

        /**
         * Struct containing the CA cert to use for the targets.
         */
        export interface MetricsInstanceSpecRemotewriteTlsconfigCaArgs {
            /**
             * ConfigMap containing data to use for the targets.
             */
            configMap?: pulumi.Input<inputs.monitoring.v1alpha1.MetricsInstanceSpecRemotewriteTlsconfigCaConfigmapArgs>;
            /**
             * Secret containing data to use for the targets.
             */
            secret?: pulumi.Input<inputs.monitoring.v1alpha1.MetricsInstanceSpecRemotewriteTlsconfigCaSecretArgs>;
        }

        /**
         * ConfigMap containing data to use for the targets.
         */
        export interface MetricsInstanceSpecRemotewriteTlsconfigCaConfigmapArgs {
            /**
             * The key to select.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Secret containing data to use for the targets.
         */
        export interface MetricsInstanceSpecRemotewriteTlsconfigCaSecretArgs {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Struct containing the client cert file for the targets.
         */
        export interface MetricsInstanceSpecRemotewriteTlsconfigCertArgs {
            /**
             * ConfigMap containing data to use for the targets.
             */
            configMap?: pulumi.Input<inputs.monitoring.v1alpha1.MetricsInstanceSpecRemotewriteTlsconfigCertConfigmapArgs>;
            /**
             * Secret containing data to use for the targets.
             */
            secret?: pulumi.Input<inputs.monitoring.v1alpha1.MetricsInstanceSpecRemotewriteTlsconfigCertSecretArgs>;
        }

        /**
         * ConfigMap containing data to use for the targets.
         */
        export interface MetricsInstanceSpecRemotewriteTlsconfigCertConfigmapArgs {
            /**
             * The key to select.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Secret containing data to use for the targets.
         */
        export interface MetricsInstanceSpecRemotewriteTlsconfigCertSecretArgs {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Secret containing the client key file for the targets.
         */
        export interface MetricsInstanceSpecRemotewriteTlsconfigKeysecretArgs {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * RelabelConfig allows dynamic rewriting of the label set, being applied to samples before ingestion. It defines `<metric_relabel_configs>`-section of Prometheus configuration. More info: https://prometheus.io/docs/prometheus/latest/configuration/configuration/#metric_relabel_configs
         */
        export interface MetricsInstanceSpecRemotewriteWriterelabelconfigsArgs {
            /**
             * Action to perform based on regex matching. Default is 'replace'
             */
            action?: pulumi.Input<string>;
            /**
             * Modulus to take of the hash of the source label values.
             */
            modulus?: pulumi.Input<number>;
            /**
             * Regular expression against which the extracted value is matched. Default is '(.*)'
             */
            regex?: pulumi.Input<string>;
            /**
             * Replacement value against which a regex replace is performed if the regular expression matches. Regex capture groups are available. Default is '$1'
             */
            replacement?: pulumi.Input<string>;
            /**
             * Separator placed between concatenated source label values. default is ';'.
             */
            separator?: pulumi.Input<string>;
            /**
             * The source labels select values from existing labels. Their content is concatenated using the configured separator and matched against the configured regular expression for the replace, keep, and drop actions.
             */
            sourceLabels?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Label to which the resulting value is written in a replace action. It is mandatory for replace actions. Regex capture groups are available.
             */
            targetLabel?: pulumi.Input<string>;
        }
        /**
         * metricsInstanceSpecRemotewriteWriterelabelconfigsArgsProvideDefaults sets the appropriate defaults for MetricsInstanceSpecRemotewriteWriterelabelconfigsArgs
         */
        export function metricsInstanceSpecRemotewriteWriterelabelconfigsArgsProvideDefaults(val: MetricsInstanceSpecRemotewriteWriterelabelconfigsArgs): MetricsInstanceSpecRemotewriteWriterelabelconfigsArgs {
            return {
                ...val,
                action: (val.action) ?? "replace",
            };
        }

        /**
         * ServiceMonitorNamespaceSelector are the set of labels to determine which namespaces to watch for ServiceMonitor discovery. If nil, only checks own namespace.
         */
        export interface MetricsInstanceSpecServicemonitornamespaceselectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.monitoring.v1alpha1.MetricsInstanceSpecServicemonitornamespaceselectorMatchexpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface MetricsInstanceSpecServicemonitornamespaceselectorMatchexpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * ServiceMonitorSelector determines which ServiceMonitors should be selected for target discovery.
         */
        export interface MetricsInstanceSpecServicemonitorselectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.monitoring.v1alpha1.MetricsInstanceSpecServicemonitorselectorMatchexpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface MetricsInstanceSpecServicemonitorselectorMatchexpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

    }
}
