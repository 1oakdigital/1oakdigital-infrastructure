// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

import * as utilities from "../utilities";

import {ObjectMeta} from "../meta/v1";

export namespace monitoring {
    export namespace v1alpha1 {
        /**
         * Spec holds the specification of the desired behavior for the PodLogs.
         */
        export interface PodLogsSpecArgs {
            /**
             * The label to use to retrieve the job name from.
             */
            jobLabel?: pulumi.Input<string>;
            /**
             * Selector to select which namespaces the Pod objects are discovered from.
             */
            namespaceSelector?: pulumi.Input<inputs.monitoring.v1alpha1.PodLogsSpecNamespaceselectorArgs>;
            /**
             * Pipeline stages for this pod. Pipeline stages support transforming and filtering log lines.
             */
            pipelineStages?: pulumi.Input<pulumi.Input<inputs.monitoring.v1alpha1.PodLogsSpecPipelinestagesArgs>[]>;
            /**
             * PodTargetLabels transfers labels on the Kubernetes Pod onto the target.
             */
            podTargetLabels?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * RelabelConfigs to apply to logs before delivering. Grafana Agent Operator automatically adds relabelings for a few standard Kubernetes fields and replaces original scrape job name with __tmp_logs_job_name. 
             *  More info: https://grafana.com/docs/loki/latest/clients/promtail/configuration/#relabel_configs
             */
            relabelings?: pulumi.Input<pulumi.Input<inputs.monitoring.v1alpha1.PodLogsSpecRelabelingsArgs>[]>;
            /**
             * Selector to select Pod objects. Required.
             */
            selector: pulumi.Input<inputs.monitoring.v1alpha1.PodLogsSpecSelectorArgs>;
        }

        /**
         * Selector to select which namespaces the Pod objects are discovered from.
         */
        export interface PodLogsSpecNamespaceselectorArgs {
            /**
             * Boolean describing whether all namespaces are selected in contrast to a list restricting them.
             */
            any?: pulumi.Input<boolean>;
            /**
             * List of namespace names to select from.
             */
            matchNames?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * PipelineStageSpec defines an individual pipeline stage. Each stage type is mutually exclusive and no more than one may be set per stage. 
         *  More information on pipelines can be found in the Promtail documentation: https://grafana.com/docs/loki/latest/clients/promtail/pipelines/
         */
        export interface PodLogsSpecPipelinestagesArgs {
            /**
             * CRI is a parsing stage that reads log lines using the standard CRI logging format. Supply cri: {} to enable.
             */
            cri?: pulumi.Input<{[key: string]: any}>;
            /**
             * Docker is a parsing stage that reads log lines using the standard Docker logging format. Supply docker: {} to enable.
             */
            docker?: pulumi.Input<{[key: string]: any}>;
            /**
             * Drop is a filtering stage that lets you drop certain logs.
             */
            drop?: pulumi.Input<inputs.monitoring.v1alpha1.PodLogsSpecPipelinestagesDropArgs>;
            /**
             * JSON is a parsing stage that reads the log line as JSON and accepts JMESPath expressions to extract data. 
             *  Information on JMESPath: http://jmespath.org/
             */
            json?: pulumi.Input<inputs.monitoring.v1alpha1.PodLogsSpecPipelinestagesJsonArgs>;
            /**
             * LabelAllow is an action stage that only allows the provided labels to be included in the label set that is sent to Loki with the log entry.
             */
            labelAllow?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * LabelDrop is an action stage that drops labels from the label set that is sent to Loki with the log entry.
             */
            labelDrop?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Labels is an action stage that takes data from the extracted map and modifies the label set that is sent to Loki with the log entry. 
             *  The key is REQUIRED and represents the name for the label that will be created. Value is optional and will be the name from extracted data to use for the value of the label. If the value is not provided, it defaults to match the key.
             */
            labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * Match is a filtering stage that conditionally applies a set of stages or drop entries when a log entry matches a configurable LogQL stream selector and filter expressions.
             */
            match?: pulumi.Input<inputs.monitoring.v1alpha1.PodLogsSpecPipelinestagesMatchArgs>;
            /**
             * Metrics is an action stage that supports defining and updating metrics based on data from the extracted map. Created metrics are not pushed to Loki or Prometheus and are instead exposed via the /metrics endpoint of the Grafana Agent pod. The Grafana Agent Operator should be configured with a MetricsInstance that discovers the logging DaemonSet to collect metrics created by this stage.
             */
            metrics?: pulumi.Input<{[key: string]: pulumi.Input<inputs.monitoring.v1alpha1.PodLogsSpecPipelinestagesMetricsArgs>}>;
            /**
             * Multiline stage merges multiple lines into a multiline block before passing it on to the next stage in the pipeline.
             */
            multiline?: pulumi.Input<inputs.monitoring.v1alpha1.PodLogsSpecPipelinestagesMultilineArgs>;
            /**
             * Output stage is an action stage that takes data from the extracted map and changes the log line that will be sent to Loki.
             */
            output?: pulumi.Input<inputs.monitoring.v1alpha1.PodLogsSpecPipelinestagesOutputArgs>;
            /**
             * Pack is a transform stage that lets you embed extracted values and labels into the log line by packing the log line and labels inside of a JSON object.
             */
            pack?: pulumi.Input<inputs.monitoring.v1alpha1.PodLogsSpecPipelinestagesPackArgs>;
            /**
             * Regex is a parsing stage that parses a log line using a regular expression.  Named capture groups in the regex allows for adding data into the extracted map.
             */
            regex?: pulumi.Input<inputs.monitoring.v1alpha1.PodLogsSpecPipelinestagesRegexArgs>;
            /**
             * Replace is a parsing stage that parses a log line using a regular expression and replaces the log line. Named capture groups in the regex allows for adding data into the extracted map.
             */
            replace?: pulumi.Input<inputs.monitoring.v1alpha1.PodLogsSpecPipelinestagesReplaceArgs>;
            /**
             * Template is a transform stage that manipulates the values in the extracted map using Go's template syntax.
             */
            template?: pulumi.Input<inputs.monitoring.v1alpha1.PodLogsSpecPipelinestagesTemplateArgs>;
            /**
             * Tenant is an action stage that sets the tenant ID for the log entry picking it from a field in the extracted data map. If the field is missing, the default LogsClientSpec.tenantId will be used.
             */
            tenant?: pulumi.Input<inputs.monitoring.v1alpha1.PodLogsSpecPipelinestagesTenantArgs>;
            /**
             * Timestamp is an action stage that can change the timestamp of a log line before it is sent to Loki. If not present, the timestamp of a log line defaults to the time when the log line was read.
             */
            timestamp?: pulumi.Input<inputs.monitoring.v1alpha1.PodLogsSpecPipelinestagesTimestampArgs>;
        }

        /**
         * Drop is a filtering stage that lets you drop certain logs.
         */
        export interface PodLogsSpecPipelinestagesDropArgs {
            /**
             * Every time a log line is dropped, the metric logentry_dropped_lines_total is incremented. A "reason" label is added, and can be customized by providing a custom value here. Defaults to "drop_stage".
             */
            dropCounterReason?: pulumi.Input<string>;
            /**
             * RE2 regular expression. 
             *  If source is provided, the regex attempts to match the source. 
             *  If no source is provided, then the regex attempts to attach the log line. 
             *  If the provided regex matches the log line or a provided source, the line is dropped.
             */
            expression?: pulumi.Input<string>;
            /**
             * LongerThan will drop a log line if it its content is longer than this value (in bytes). Can be expressed as an integer (8192) or a number with a suffix (8kb).
             */
            longerThan?: pulumi.Input<string>;
            /**
             * OlderThan will be parsed as a Go duration. If the log line's timestamp is older than the current time minus the provided duration, it will be dropped.
             */
            olderThan?: pulumi.Input<string>;
            /**
             * Name from the extract data to parse. If empty, uses the log message.
             */
            source?: pulumi.Input<string>;
            /**
             * Value can only be specified when source is specified. If the value provided is an exact match for the given source then the line will be dropped. 
             *  Mutually exclusive with expression.
             */
            value?: pulumi.Input<string>;
        }

        /**
         * JSON is a parsing stage that reads the log line as JSON and accepts JMESPath expressions to extract data. 
         *  Information on JMESPath: http://jmespath.org/
         */
        export interface PodLogsSpecPipelinestagesJsonArgs {
            /**
             * Set of the key/value pairs of JMESPath expressions. The key will be the key in the extracted data while the expression will be the value, evaluated as a JMESPath from the source data. 
             *  Literal JMESPath expressions can be used by wrapping a key in double quotes, which then must be wrapped again in single quotes in YAML so they get passed to the JMESPath parser.
             */
            expressions?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * Name from the extracted data to parse as JSON. If empty, uses entire log message.
             */
            source?: pulumi.Input<string>;
        }

        /**
         * Match is a filtering stage that conditionally applies a set of stages or drop entries when a log entry matches a configurable LogQL stream selector and filter expressions.
         */
        export interface PodLogsSpecPipelinestagesMatchArgs {
            /**
             * Determines what action is taken when the selector matches the log line. Can be keep or drop. Defaults to keep. When set to drop, entries are dropped and no later metrics are recorded. Stages must be empty when dropping metrics.
             */
            action?: pulumi.Input<string>;
            /**
             * Every time a log line is dropped, the metric logentry_dropped_lines_total is incremented. A "reason" label is added, and can be customized by providing a custom value here. Defaults to "match_stage."
             */
            dropCounterReason?: pulumi.Input<string>;
            /**
             * Names the pipeline. When defined, creates an additional label in the pipeline_duration_seconds histogram, where the value is concatenated with job_name using an underscore.
             */
            pipelineName?: pulumi.Input<string>;
            /**
             * LogQL stream selector and filter expressions. Required.
             */
            selector: pulumi.Input<string>;
            /**
             * Nested set of pipeline stages to execute when action is keep and the log line matches selector. 
             *  An example value for stages may be: 
             *  stages: | - json: {} - labelAllow: [foo, bar] 
             *  Note that stages is a string because SIG API Machinery does not support recursive types, and so it cannot be validated for correctness. Be careful not to mistype anything.
             */
            stages?: pulumi.Input<string>;
        }

        /**
         * MetricsStageSpec is an action stage that allows for defining and updating metrics based on data from the extracted map. Created metrics are not pushed to Loki or Prometheus and are instead exposed via the /metrics endpoint of the Grafana Agent pod. The Grafana Agent Operator should be configured with a MetricsInstance that discovers the logging DaemonSet to collect metrics created by this stage.
         */
        export interface PodLogsSpecPipelinestagesMetricsArgs {
            /**
             * The action to take against the metric. Required. 
             *  Must be either "inc" or "add" for type: counter or type: histogram. When type: gauge, must be one of "set", "inc", "dec", "add", or "sub". 
             *  "add", "set", or "sub" requires the extracted value to be convertible to a positive float.
             */
            action: pulumi.Input<string>;
            /**
             * Buckets to create. Bucket values must be convertible to float64s. Extremely large or small numbers are subject to some loss of precision. Only valid for type: histogram.
             */
            buckets?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * If true all log line bytes are counted. Can only be set with matchAll: true and action: add. 
             *  Only valid for type: counter.
             */
            countEntryBytes?: pulumi.Input<boolean>;
            /**
             * Sets the description for the created metric.
             */
            description?: pulumi.Input<string>;
            /**
             * If true, all log lines are counted without attempting to match the source to the extracted map. Mutually exclusive with value. 
             *  Only valid for type: counter.
             */
            matchAll?: pulumi.Input<boolean>;
            /**
             * Label values on metrics are dynamic which can cause exported metrics to go stale. To prevent unbounded cardinality, any metrics not updated within MaxIdleDuration are removed. 
             *  Must be greater or equal to 1s. Defaults to 5m.
             */
            maxIdleDuration?: pulumi.Input<string>;
            /**
             * Sets the custom prefix name for the metric. Defaults to "promtail_custom_".
             */
            prefix?: pulumi.Input<string>;
            /**
             * Key from the extracted data map to use for the metric. Defaults to the metrics name if not present.
             */
            source?: pulumi.Input<string>;
            /**
             * The metric type to create. Must be one of counter, gauge, histogram. Required.
             */
            type: pulumi.Input<string>;
            /**
             * Filters down source data and only changes the metric if the targeted value matches the provided string exactly. If not present, all data matches.
             */
            value?: pulumi.Input<string>;
        }

        /**
         * Multiline stage merges multiple lines into a multiline block before passing it on to the next stage in the pipeline.
         */
        export interface PodLogsSpecPipelinestagesMultilineArgs {
            /**
             * RE2 regular expression. Creates a new multiline block when matched. Required.
             */
            firstLine: pulumi.Input<string>;
            /**
             * Maximum number of lines a block can have. A new block is started if the number of lines surpasses this value. Defaults to 128.
             */
            maxLines?: pulumi.Input<number>;
            /**
             * Maximum time to wait before passing on the multiline block to the next stage if no new lines are received. Defaults to 3s.
             */
            maxWaitTime?: pulumi.Input<string>;
        }

        /**
         * Output stage is an action stage that takes data from the extracted map and changes the log line that will be sent to Loki.
         */
        export interface PodLogsSpecPipelinestagesOutputArgs {
            /**
             * Name from extract data to use for the log entry. Required.
             */
            source: pulumi.Input<string>;
        }

        /**
         * Pack is a transform stage that lets you embed extracted values and labels into the log line by packing the log line and labels inside of a JSON object.
         */
        export interface PodLogsSpecPipelinestagesPackArgs {
            /**
             * If the resulting log line should use any existing timestamp or use time.Now() when the line was created. Set to true when combining several log streams from different containers to avoid out of order errors.
             */
            ingestTimestamp?: pulumi.Input<boolean>;
            /**
             * Name from extracted data or line labels. Required. Labels provided here are automatically removed from output labels.
             */
            labels: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * Regex is a parsing stage that parses a log line using a regular expression.  Named capture groups in the regex allows for adding data into the extracted map.
         */
        export interface PodLogsSpecPipelinestagesRegexArgs {
            /**
             * RE2 regular expression. Each capture group MUST be named. Required.
             */
            expression: pulumi.Input<string>;
            /**
             * Name from extracted data to parse. If empty, defaults to using the log message.
             */
            source?: pulumi.Input<string>;
        }

        /**
         * Replace is a parsing stage that parses a log line using a regular expression and replaces the log line. Named capture groups in the regex allows for adding data into the extracted map.
         */
        export interface PodLogsSpecPipelinestagesReplaceArgs {
            /**
             * RE2 regular expression. Each capture group MUST be named. Required.
             */
            expression: pulumi.Input<string>;
            /**
             * Value to replace the captured group with.
             */
            replace?: pulumi.Input<string>;
            /**
             * Name from extracted data to parse. If empty, defaults to using the log message.
             */
            source?: pulumi.Input<string>;
        }

        /**
         * Template is a transform stage that manipulates the values in the extracted map using Go's template syntax.
         */
        export interface PodLogsSpecPipelinestagesTemplateArgs {
            /**
             * Name from extracted data to parse. Required. If empty, defaults to using the log message.
             */
            source: pulumi.Input<string>;
            /**
             * Go template string to use. Required. In addition to normal template functions, ToLower, ToUpper, Replace, Trim, TrimLeft, TrimRight, TrimPrefix, and TrimSpace are also available.
             */
            template: pulumi.Input<string>;
        }

        /**
         * Tenant is an action stage that sets the tenant ID for the log entry picking it from a field in the extracted data map. If the field is missing, the default LogsClientSpec.tenantId will be used.
         */
        export interface PodLogsSpecPipelinestagesTenantArgs {
            /**
             * Name from labels whose value should be set as tenant ID. Mutually exclusive with source and value.
             */
            label?: pulumi.Input<string>;
            /**
             * Name from extracted data to use as the tenant ID. Mutually exclusive with label and value.
             */
            source?: pulumi.Input<string>;
            /**
             * Value to use for the template ID. Useful when this stage is used within a conditional pipeline such as match. Mutually exclusive with label and source.
             */
            value?: pulumi.Input<string>;
        }

        /**
         * Timestamp is an action stage that can change the timestamp of a log line before it is sent to Loki. If not present, the timestamp of a log line defaults to the time when the log line was read.
         */
        export interface PodLogsSpecPipelinestagesTimestampArgs {
            /**
             * Action to take when the timestamp can't be extracted or parsed. Can be skip or fudge. Defaults to fudge.
             */
            actionOnFailure?: pulumi.Input<string>;
            /**
             * Fallback formats to try if format fails.
             */
            fallbackFormats?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Determines format of the time string. Required. Can be one of: ANSIC, UnixDate, RubyDate, RFC822, RFC822Z, RFC850, RFC1123, RFC1123Z, RFC3339, RFC3339Nano, Unix, UnixMs, UnixUs, UnixNs.
             */
            format: pulumi.Input<string>;
            /**
             * IANA Timezone Database string.
             */
            location?: pulumi.Input<string>;
            /**
             * Name from extracted data to use as the timestamp. Required.
             */
            source: pulumi.Input<string>;
        }

        /**
         * RelabelConfig allows dynamic rewriting of the label set, being applied to samples before ingestion. It defines `<metric_relabel_configs>`-section of Prometheus configuration. More info: https://prometheus.io/docs/prometheus/latest/configuration/configuration/#metric_relabel_configs
         */
        export interface PodLogsSpecRelabelingsArgs {
            /**
             * Action to perform based on regex matching. Default is 'replace'
             */
            action?: pulumi.Input<string>;
            /**
             * Modulus to take of the hash of the source label values.
             */
            modulus?: pulumi.Input<number>;
            /**
             * Regular expression against which the extracted value is matched. Default is '(.*)'
             */
            regex?: pulumi.Input<string>;
            /**
             * Replacement value against which a regex replace is performed if the regular expression matches. Regex capture groups are available. Default is '$1'
             */
            replacement?: pulumi.Input<string>;
            /**
             * Separator placed between concatenated source label values. default is ';'.
             */
            separator?: pulumi.Input<string>;
            /**
             * The source labels select values from existing labels. Their content is concatenated using the configured separator and matched against the configured regular expression for the replace, keep, and drop actions.
             */
            sourceLabels?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Label to which the resulting value is written in a replace action. It is mandatory for replace actions. Regex capture groups are available.
             */
            targetLabel?: pulumi.Input<string>;
        }
        /**
         * podLogsSpecRelabelingsArgsProvideDefaults sets the appropriate defaults for PodLogsSpecRelabelingsArgs
         */
        export function podLogsSpecRelabelingsArgsProvideDefaults(val: PodLogsSpecRelabelingsArgs): PodLogsSpecRelabelingsArgs {
            return {
                ...val,
                action: (val.action) ?? "replace",
            };
        }

        /**
         * Selector to select Pod objects. Required.
         */
        export interface PodLogsSpecSelectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.monitoring.v1alpha1.PodLogsSpecSelectorMatchexpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface PodLogsSpecSelectorMatchexpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

    }
}
